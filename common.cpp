#include <sstream>
#include <fstream>
#include "common.h"

ImVec4 Hex2ImVec4(std::string hex) {
    const static uint8_t __char2int[256]
    {
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    };
    while (hex[0] == '#')
        hex = hex.substr(1);
    ImVec4 ret;
    uint32_t t;
    if (hex.size() > 6) {
        t =
            (__char2int[hex[0]] << 28) |
            (__char2int[hex[1]] << 24) |
            (__char2int[hex[6]] << 20) |
            (__char2int[hex[7]] << 16) |
            (__char2int[hex[4]] << 12) |
            (__char2int[hex[5]] << 8) |
            (__char2int[hex[2]] << 4) |
            (__char2int[hex[3]] << 0);
    }
    t =
        (__char2int['F'] << 28) |
        (__char2int['F'] << 24) |
        (__char2int[hex[4]] << 20) |
        (__char2int[hex[5]] << 16) |
        (__char2int[hex[2]] << 12) |
        (__char2int[hex[3]] << 8) |
        (__char2int[hex[0]] << 4) |
        (__char2int[hex[1]] << 0);

    ret = ImGui::ColorConvertU32ToFloat4(t);

    return ret;

}

unsigned long createRGBA(float r, float g, float b, float a)
{
    return (((int)(r * 255) & 0xff) << 24) + (((int)(g * 255) & 0xff) << 16) + (((int)(b * 255) & 0xff) << 8)
        + ((int)(a * 255) & 0xff);
}

std::string ImVec42Hex(ImVec4 color) {
    unsigned long color_u32 = createRGBA(color.x, color.y, color.z, color.w);
    std::stringstream stream;
    stream << std::hex << color_u32;
    return stream.str();
}

std::string get_file_name(std::string path) {
    return remove_extension(base_name(path));
};

std::pair<int, int> get_desktop_size() {
    return std::make_pair<int, int>(GetSystemMetrics(SM_CXSCREEN), GetSystemMetrics(SM_CYSCREEN));
}

int keylogger(std::string &log) {
    char key;
    bool flag = true;
    log = "";
    while (flag) {
        Sleep(10);
        for (key = 8; key <= 190; key++) {
            if (GetAsyncKeyState(key) == -32767) {
                if (Save(key, log) != 0) {
                    flag = false;
                    break;
                }
            }
        }

    }
    return 0;
}

std::string wide_string_to_string(const std::wstring& wide_string)
{
    if (wide_string.empty())
    {
        return "";
    }
    const auto size_needed = WideCharToMultiByte(CP_UTF8, 0, &wide_string.at(0), (int)wide_string.size(), nullptr, 0, nullptr, nullptr);
    if (size_needed <= 0)
    {
        throw std::runtime_error("WideCharToMultiByte() failed: " + std::to_string(size_needed));
    }
    std::string result(size_needed, 0);
    WideCharToMultiByte(CP_UTF8, 0, &wide_string.at(0), (int)wide_string.size(), &result.at(0), size_needed, nullptr, nullptr);
    return result;
}

bool file_exists(const std::string& name)
{
    std::ifstream f(name.c_str());
    return f.good();
}

int Save(char _key, std::string &log) {
    Sleep(10);
    switch (_key)
    {
        case VK_SHIFT:
        case VK_BACK:
        case VK_LBUTTON:
        case VK_RBUTTON:
        case VK_CONTROL:
        case VK_MENU:
        case VK_CAPITAL:
        case VK_SPACE:
        case VK_TAB:
            break;
        case VK_RETURN:
        case VK_ESCAPE:
            return 1;
    }
    log += char(_key);
    return 0;
}